configIstio:
  Example: |-
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################
    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.
    # A gateway and Istio service to serve external traffic.
    # The configuration format should be
    # `gateway.{{gateway_namespace}}.{{gateway_name}}: "{{ingress_name}}.{{ingress_namespace}}.svc.cluster.local"`.
    # The {{gateway_namespace}} is optional; when it is omitted, the system will search for
    # the gateway in the serving system namespace `knative-serving`
    gateway.knative-serving.knative-ingress-gateway: "istio-ingressgateway.istio-system.svc.cluster.local"
    # A cluster local gateway to allow pods outside of the mesh to access
    # Services and Routes not exposing through an ingress.  If the users
    # do have a service mesh setup, this isn't required and can be removed.
    #
    # An example use case is when users want to use Istio without any
    # sidecar injection (like Knative's istio-ci-no-mesh.yaml).  Since every pod
    # is outside of the service mesh in that case, a cluster-local  service
    # will need to be exposed to a cluster-local gateway to be accessible.
    # The configuration format should be `local-gateway.{{local_gateway_namespace}}.
    # {{local_gateway_name}}: "{{cluster_local_gateway_name}}.
    # {{cluster_local_gateway_namespace}}.svc.cluster.local"`. The
    # {{local_gateway_namespace}} is optional; when it is omitted, the system
    # will search for the local gateway in the serving system namespace
    # `knative-serving`
    local-gateway.knative-serving.knative-local-gateway: "knative-local-gateway.istio-system.svc.cluster.local"
knativeLocalGateway:
  ports:
  - name: http2
    port: 80
    targetPort: 8081
  type: ClusterIP
kubernetesClusterDomain: cluster.local
netIstioController:
  controller:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    env:
      configLoggingName: config-logging
      configObservabilityName: config-observability
      enableSecretInformerFilteringByCertUid: "false"
      metricsDomain: knative.dev/net-istio
    image:
      repository: gcr.io/knative-releases/knative.dev/net-istio/cmd/controller@sha256
      tag: 27e7beb7c62036216fc464fb2181e56b030158ad4ceb57a7de172f54b4fe43db
    resources:
      limits:
        cpu: 300m
        memory: 400Mi
      requests:
        cpu: 30m
        memory: 40Mi
netIstioWebhook:
  ports:
  - name: http-metrics
    port: 9090
    targetPort: metrics
  - name: http-profiling
    port: 8008
    targetPort: profiling
  - name: https-webhook
    port: 443
    targetPort: https-webhook
  type: ClusterIP
  webhook:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    env:
      configLoggingName: config-logging
      configObservabilityName: config-observability
      metricsDomain: knative.dev/net-istio
      webhookName: net-istio-webhook
      webhookPort: "8443"
    image:
      repository: gcr.io/knative-releases/knative.dev/net-istio/cmd/webhook@sha256
      tag: 0cdef272e39c57971ce9977765f164dd8e3abb9395a4f60e7a4160d57dcc09f2
    resources:
      limits:
        cpu: 200m
        memory: 200Mi
      requests:
        cpu: 20m
        memory: 20Mi
